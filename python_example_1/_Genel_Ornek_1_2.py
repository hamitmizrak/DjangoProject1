"""
GerÃ§ek Hayat Problemi: Blog YÃ¶netim Sistemi ve Ä°Ã§erik Analizi
Senaryo: Bir blog yÃ¶netim sisteminiz var ve bu sistem Ã¼zerinden yazarlar iÃ§erik yayÄ±mlÄ±yor.
Blog iÃ§eriÄŸi Ã¼zerinde Ã§eÅŸitli analizler yaparak yazar performansÄ±nÄ± Ã¶lÃ§mek,
popÃ¼ler iÃ§erikleri belirlemek, sÄ±k kullanÄ±lan kelimeleri analiz etmek ve kullanÄ±cÄ±larÄ±n ilgisini Ã§eken konularÄ± keÅŸfetmek istiyorsunuz.

AÅŸaÄŸÄ±da Python ile bir blog yÃ¶netim sistemi iÃ§in geniÅŸ kapsamlÄ± bir iÃ§erik analizi Ã¶rneÄŸi verilmiÅŸtir.
"""


# Ã–rnek blog iÃ§erikleri
blog_icerikleri = [
    {
        "blog_id": 1,
        "yazar": "ali123",
        "baslik": "Python Programlama Rehberi",
        "icerik": "Python programlama diliyle ilgili baÅŸlangÄ±Ã§ seviyesinden ileri dÃ¼zeye kadar detaylÄ± bilgiler iÃ§erir. Ã–ÄŸrenmesi kolay ve gÃ¼Ã§lÃ¼ bir dildir.",
        "kategori": "Programlama",
        "goruntulenme": 1500,
        "yorumlar": [
            {"kullanici": "ayse456", "yorum": "GerÃ§ekten harika bir rehber, Ã§ok faydalÄ±!"},
            {"kullanici": "mehmet789", "yorum": "Bilgilendirici ama biraz daha Ã¶rnek olsa iyi olurdu."},
        ],
    },
    {
        "blog_id": 2,
        "yazar": "ayse456",
        "baslik": "Web GeliÅŸtirme iÃ§in HTML ve CSS",
        "icerik": "Web geliÅŸtirme dÃ¼nyasÄ±na giriÅŸ yapmak isteyenler iÃ§in HTML ve CSS konularÄ±nda temel bilgiler sunar. Ä°yi bir baÅŸlangÄ±Ã§ rehberi.",
        "kategori": "Web GeliÅŸtirme",
        "goruntulenme": 1200,
        "yorumlar": [
            {"kullanici": "ali123", "yorum": "Ã‡ok net ve aÃ§Ä±klayÄ±cÄ± bir yazÄ±, teÅŸekkÃ¼rler!"},
            {"kullanici": "zeynep654", "yorum": "HTML kÄ±smÄ± iyi ama CSS biraz daha detaylandÄ±rÄ±lmalÄ±."},
        ],
    },
    {
        "blog_id": 3,
        "yazar": "mehmet789",
        "baslik": "Makine Ã–ÄŸrenimi Nedir?",
        "icerik": "Makine Ã¶ÄŸrenimi, yapay zeka alanÄ±nda bir alt daldÄ±r. Bu yazÄ±, temel kavramlar ve uygulama alanlarÄ±nÄ± ele alÄ±r.",
        "kategori": "Yapay Zeka",
        "goruntulenme": 800,
        "yorumlar": [
            {"kullanici": "ayse456", "yorum": "Makine Ã¶ÄŸrenimi konusuna gÃ¼zel bir giriÅŸ olmuÅŸ."},
            {"kullanici": "fatma321", "yorum": "Daha fazla teknik detay verilseydi Ã§ok daha faydalÄ± olurdu."},
        ],
    },
    {
        "blog_id": 4,
        "yazar": "zeynep654",
        "baslik": "SEO Teknikleriyle Blog TrafiÄŸini ArtÄ±rma",
        "icerik": "SEO, web sitenizin arama motorlarÄ±nda Ã¼st sÄ±ralarda yer almasÄ±nÄ± saÄŸlar. Bu yazÄ±, etkili SEO tekniklerini iÃ§erir.",
        "kategori": "Dijital Pazarlama",
        "goruntulenme": 2500,
        "yorumlar": [
            {"kullanici": "mehmet789", "yorum": "Ã‡ok iÅŸime yaradÄ±, teÅŸekkÃ¼rler!"},
            {"kullanici": "ali123", "yorum": "SEO'yu iyi anlatmÄ±ÅŸsÄ±nÄ±z, pratik teknikler iÃ§in gÃ¼zel bir rehber."},
        ],
    },
]

"""
1. Veri YapÄ±larÄ± ile Ã‡alÄ±ÅŸma
Ã–ÄŸrenilecekler:
SÃ¶zlÃ¼kler (Dictionaries): Blog verilerinin her bir blog iÃ§in ayrÄ±ntÄ±lÄ± bilgileri (baÅŸlÄ±k, iÃ§erik, yorumlar vb.) iÃ§ermesi, sÃ¶zlÃ¼klerin kullanÄ±mÄ±nÄ± gÃ¶sterir.
Listeler (Lists): Bloglar ve yorumlar bir liste olarak saklanÄ±r. Bu, liste veri yapÄ±sÄ±nÄ±n nasÄ±l kullanÄ±lacaÄŸÄ±nÄ± anlamanÄ±zÄ± saÄŸlar.
Ã–ÄŸretiyor:
KarmaÅŸÄ±k veri yapÄ±larÄ±nÄ± modelleme.
Ä°Ã§ iÃ§e geÃ§miÅŸ veri yapÄ±larÄ±nda gezinme.
2. DÃ¶ngÃ¼ler ve Kontroller
Ã–ÄŸrenilecekler:
for DÃ¶ngÃ¼leri: Bloglar arasÄ±nda dolaÅŸarak bilgi toplama (Ã¶rneÄŸin, toplam blog sayÄ±sÄ±).
KoÅŸullar (if): Belirli kriterlere (Ã¶rneÄŸin, bir kelimenin iÃ§erikte geÃ§mesi) dayalÄ± kontroller.
Ã–ÄŸretiyor:
Verilere dÃ¶ngÃ¼yle eriÅŸim.
ÅžartlÄ± ifadelerle kontrol mekanizmalarÄ± oluÅŸturma.
3. Veri Analizi
Ã–ÄŸrenilecekler:
SÄ±k KullanÄ±lan Kelimeler: Metin verilerini analiz ederek en sÄ±k kullanÄ±lan kelimeleri bulma.
PopÃ¼lerlik ve GÃ¶rÃ¼ntÃ¼lenme: GÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ± gibi sayÄ±sal verilerle Ã§alÄ±ÅŸarak popÃ¼ler iÃ§erikleri belirleme.
Ã–ÄŸretiyor:
Verilerden anlamlÄ± bilgiler Ã§Ä±karma.
Metin analizi ve kelime frekansÄ± hesaplama.
4. Fonksiyonel Programlama
Ã–ÄŸrenilecekler:
Lambda FonksiyonlarÄ±: Veri sÄ±ralama (Ã¶rneÄŸin, bloglarÄ± uzunluÄŸa veya gÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ±na gÃ¶re sÄ±ralama) gibi durumlarda lambda fonksiyonlarÄ±nÄ± kullanma.
max ve sort: Veri kÃ¼mesindeki maksimum veya sÄ±ralÄ± deÄŸerleri bulma.
Ã–ÄŸretiyor:
Kodunuzu daha kÄ±sa ve etkili hale getirmek iÃ§in anonim fonksiyonlarÄ± kullanma.
5. Nesne Temelli Analiz
Ã–ÄŸrenilecekler:
Bloglar ve yorumlar gibi gerÃ§ek dÃ¼nyadan alÄ±nan kavramlarÄ± modellemek.
Veri yapÄ±larÄ±yla nesne temelli bir yaklaÅŸÄ±mÄ± Ã¶ÄŸrenmek.
Ã–ÄŸretiyor:
Kodlamada nesnelerin temsil edilmesi.
Veri organizasyonu ve iÅŸleme.
6. KullanÄ±cÄ± Deneyimi ve Geri Bildirim Analizi
Ã–ÄŸrenilecekler:
KullanÄ±cÄ±larÄ±n yorumlarÄ±nÄ± analiz ederek iÃ§erik geliÅŸtirme stratejileri belirleme.
KullanÄ±cÄ±larÄ±n hangi bloglarla daha fazla etkileÅŸime girdiÄŸini Ã¶lÃ§me.
Ã–ÄŸretiyor:
KullanÄ±cÄ± geri bildirimlerini anlamak iÃ§in metin analizi.
MÃ¼ÅŸteri odaklÄ± geliÅŸtirme iÃ§in veri toplama.
7. GerÃ§ek DÃ¼nya Problemlerini Modelleme
Ã–ÄŸrenilecekler:
Blog yÃ¶netim sistemleri gibi gerÃ§ek hayat problemlerini bir yazÄ±lÄ±m Ã§Ã¶zÃ¼mÃ¼ne dÃ¶nÃ¼ÅŸtÃ¼rme.
KarmaÅŸÄ±k problemleri alt problemlere bÃ¶lerek Ã§Ã¶zme.
Ã–ÄŸretiyor:
GerÃ§ek dÃ¼nya senaryolarÄ±nda kodlama becerilerini uygulama.
Daha bÃ¼yÃ¼k projeleri yÃ¶netme.
8. Temel Algoritma MantÄ±ÄŸÄ±
Ã–ÄŸrenilecekler:
Belirli bir kelimenin kaÃ§ kez geÃ§tiÄŸini kontrol etme.
Kategorilere gÃ¶re verileri gruplama ve sayma.
Yazar baÅŸÄ±na ortalama gÃ¶rÃ¼ntÃ¼lenme gibi metrikler hesaplama.
Ã–ÄŸretiyor:
Verileri gruplama, filtreleme ve dÃ¶nÃ¼ÅŸtÃ¼rme.
SayÄ±sal ve metinsel veri analizine yÃ¶nelik algoritmalar geliÅŸtirme.
9. Veri GÃ¶rselleÅŸtirme HazÄ±rlÄ±ÄŸÄ±
Ã–ÄŸrenilecekler:
Ã‡Ä±ktÄ±larÄ± daha iyi anlamak iÃ§in verileri analiz etme ve Ã¶zetleme.
Ã–rneÄŸin, bu veri analizinden bir grafik oluÅŸturabilirsiniz.
Ã–ÄŸretiyor:
Ã‡Ä±ktÄ±lardan raporlar oluÅŸturma.
Veri analizinden sonraki adÄ±mlarÄ± planlama.
10. Optimizasyon ve Ä°yileÅŸtirme
Ã–ÄŸrenilecekler:
BloglarÄ± daha verimli bir ÅŸekilde sÄ±ralamak veya filtrelemek iÃ§in algoritmalar geliÅŸtirme.
Ã‡alÄ±ÅŸma sÃ¼resini optimize etmek iÃ§in bÃ¼yÃ¼k veri kÃ¼meleri Ã¼zerinde iÅŸlem yapma.
Ã–ÄŸretiyor:
PerformansÄ± artÄ±rma tekniklerini uygulama.
Verimli veri iÅŸleme yÃ¶ntemleri.
Ã–zet
Blog Ã¶rneÄŸi, size aÅŸaÄŸÄ±daki konularda pratik yapma fÄ±rsatÄ± sunar:

Veri yapÄ±larÄ± ve organizasyonu.
Algoritmalar ve analiz yÃ¶ntemleri.
GerÃ§ek dÃ¼nyadan alÄ±nan senaryolarÄ± kodlama ile Ã§Ã¶zme.
Veri odaklÄ± karar verme sÃ¼reÃ§lerini modelleme.
Bu bilgiler, gerÃ§ek dÃ¼nya uygulamalarÄ± geliÅŸtirmek isteyen herkes iÃ§in kritik bir temel oluÅŸturur ve kodlama becerilerinizi gÃ¼Ã§lendirir! ðŸ˜Š

"""

"""
Kodun Ã–zellikleri
Blog SayÄ±sÄ± ve Kategorilere DaÄŸÄ±lÄ±m: Blog sayÄ±sÄ±nÄ± ve kategorilere gÃ¶re daÄŸÄ±lÄ±mÄ±nÄ± analiz eder.
PopÃ¼lerlik: GÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ±na gÃ¶re en popÃ¼ler bloglarÄ± belirler.
Kelime Analizi: Ä°Ã§eriklerde sÄ±k kullanÄ±lan kelimeleri analiz ederek ilgi Ã§ekici noktalarÄ± ortaya Ã§Ä±karÄ±r.
Yazar PerformansÄ±: YazarlarÄ±n iÃ§eriklerini analiz ederek gÃ¶rÃ¼ntÃ¼lenme sayÄ±larÄ±nÄ± Ã¶lÃ§er.
Yorum Analizi: Bloglara yapÄ±lan yorum sayÄ±sÄ±nÄ± ve kullanÄ±cÄ±larÄ±n katkÄ±larÄ±nÄ± analiz eder.
Bu Ã¶rnek, bir blog yÃ¶netim sisteminin nasÄ±l analiz edilebileceÄŸini gÃ¶sterir ve gerÃ§ek hayatta uygulanabilir bir Ã§Ã¶zÃ¼m sunar. ðŸ˜Š

"""


# 1. BloglarÄ±n toplam sayÄ±sÄ±
toplam_blog = len(blog_icerikleri)
print(f"Toplam blog sayÄ±sÄ±: {toplam_blog}")

#####################################################################################################################
# 2. Kategorilere gÃ¶re blog sayÄ±sÄ±
print("\nKategorilere gÃ¶re blog sayÄ±sÄ±:")
kategori_sayilari = {}
for blog in blog_icerikleri:
    kategori = blog["kategori"]
    kategori_sayilari[kategori] = kategori_sayilari.get(kategori, 0) + 1

for kategori, sayi in kategori_sayilari.items():
    print(f"{kategori}: {sayi} blog")


#####################################################################################################################
# 3. Yazar baÅŸÄ±na yazÄ±lan blog sayÄ±sÄ±
print("\nYazar baÅŸÄ±na yazÄ±lan blog sayÄ±sÄ±:")
yazar_blog_sayilari = {}
for blog in blog_icerikleri:
    yazar = blog["yazar"]
    yazar_blog_sayilari[yazar] = yazar_blog_sayilari.get(yazar, 0) + 1

for yazar, sayi in yazar_blog_sayilari.items():
    print(f"{yazar}: {sayi} blog")



#####################################################################################################################
# 4. En popÃ¼ler blog (gÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ±na gÃ¶re)
print("\nEn popÃ¼ler blog:")
en_populer_blog = max(blog_icerikleri, key=lambda x: x["goruntulenme"])
print(f"BaÅŸlÄ±k: {en_populer_blog['baslik']}, GÃ¶rÃ¼ntÃ¼lenme: {en_populer_blog['goruntulenme']}")



#####################################################################################################################
# 5. Yorum sayÄ±sÄ± ve en Ã§ok yorum alan blog
print("\nBloglara gÃ¶re yorum sayÄ±larÄ±:")
en_cok_yorum = 0
en_cok_yorum_blog = None

for blog in blog_icerikleri:
    yorum_sayisi = len(blog["yorumlar"])
    print(f"BaÅŸlÄ±k: {blog['baslik']}, Yorum SayÄ±sÄ±: {yorum_sayisi}")
    if yorum_sayisi > en_cok_yorum:
        en_cok_yorum = yorum_sayisi
        en_cok_yorum_blog = blog

print(f"\nEn Ã§ok yorum alan blog: {en_cok_yorum_blog['baslik']} ({en_cok_yorum} yorum)")



#####################################################################################################################
# 6. SÄ±k kullanÄ±lan kelimeleri analiz etme
print("\nBlog iÃ§eriklerinde sÄ±k kullanÄ±lan kelimeler:")
from collections import Counter

tum_kelimeler = []
for blog in blog_icerikleri:
    kelimeler = blog["icerik"].lower().split()
    tum_kelimeler.extend(kelimeler)

kelime_sayilari = Counter(tum_kelimeler)
en_sik_kelimeler = kelime_sayilari.most_common(5)
for kelime, sayi in en_sik_kelimeler:
    print(f"{kelime}: {sayi} kez")


#####################################################################################################################
# 7. KullanÄ±cÄ±larÄ±n yaptÄ±ÄŸÄ± toplam yorum sayÄ±sÄ±
print("\nKullanÄ±cÄ±larÄ±n yaptÄ±ÄŸÄ± toplam yorum sayÄ±sÄ±:")
kullanici_yorum_sayilari = {}
for blog in blog_icerikleri:
    for yorum in blog["yorumlar"]:
        kullanici = yorum["kullanici"]
        kullanici_yorum_sayilari[kullanici] = kullanici_yorum_sayilari.get(kullanici, 0) + 1

for kullanici, sayi in kullanici_yorum_sayilari.items():
    print(f"{kullanici}: {sayi} yorum")



#####################################################################################################################
# 8. YazarlarÄ±n ortalama blog gÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ±
print("\nYazarlarÄ±n ortalama blog gÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ±:")
yazar_goruntulenmeleri = {}
for blog in blog_icerikleri:
    yazar = blog["yazar"]
    goruntulenme = blog["goruntulenme"]
    if yazar not in yazar_goruntulenmeleri:
        yazar_goruntulenmeleri[yazar] = []
    yazar_goruntulenmeleri[yazar].append(goruntulenme)

for yazar, goruntulenmeler in yazar_goruntulenmeleri.items():
    ortalama_goruntulenme = sum(goruntulenmeler) / len(goruntulenmeler)
    print(f"{yazar}: {ortalama_goruntulenme:.2f} gÃ¶rÃ¼ntÃ¼lenme")


#####################################################################################################################
# 9. Belirli bir kelimenin geÃ§tiÄŸi bloglarÄ± bulma
aranan_kelime = "Python"
print(f"\n'{aranan_kelime}' kelimesinin geÃ§tiÄŸi bloglar:")
for blog in blog_icerikleri:
    if aranan_kelime.lower() in blog["icerik"].lower():
        print(f"BaÅŸlÄ±k: {blog['baslik']}, Yazar: {blog['yazar']}")

################################################################################################
"""
1. KÃ¼tÃ¼phane Kurulumu
EÄŸer bu kÃ¼tÃ¼phaneler kurulu deÄŸilse, Ã¶nce aÅŸaÄŸÄ±daki komutlarla kurulum yapabilirsiniz:

pip install matplotlib seaborn

"""




"""
2. GÃ¶rselleÅŸtirme Ã–rnekleri
a) Blog Kategorilerine GÃ¶re Blog SayÄ±sÄ±
Her kategoride kaÃ§ tane blog olduÄŸunu bir Ã§ubuk grafikle gÃ¶sterebiliriz.
import matplotlib.pyplot as plt

# Kategorilere gÃ¶re blog sayÄ±sÄ±nÄ± hesaplama
kategori_sayilari = {}
for blog in blog_icerikleri:
    kategori = blog["kategori"]
    kategori_sayilari[kategori] = kategori_sayilari.get(kategori, 0) + 1

# Verileri hazÄ±rlama
kategoriler = list(kategori_sayilari.keys())
blog_sayilari = list(kategori_sayilari.values())

# Ã‡ubuk grafik Ã§izimi
plt.figure(figsize=(8, 5))
plt.bar(kategoriler, blog_sayilari, color='skyblue')
plt.title("Kategorilere GÃ¶re Blog SayÄ±sÄ±", fontsize=14)
plt.xlabel("Kategoriler", fontsize=12)
plt.ylabel("Blog SayÄ±sÄ±", fontsize=12)
plt.show()
"""



"""
b) BloglarÄ±n GÃ¶rÃ¼ntÃ¼lenme SayÄ±larÄ±
Her bir blogun gÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ±nÄ± sÃ¼tun grafik olarak gÃ¶sterebiliriz.
# Verileri hazÄ±rlama
blog_basliklari = [blog["baslik"] for blog in blog_icerikleri]
goruntulenme_sayilari = [blog["goruntulenme"] for blog in blog_icerikleri]

# Ã‡ubuk grafik Ã§izimi
plt.figure(figsize=(10, 6))
plt.barh(blog_basliklari, goruntulenme_sayilari, color='coral')
plt.title("BloglarÄ±n GÃ¶rÃ¼ntÃ¼lenme SayÄ±larÄ±", fontsize=14)
plt.xlabel("GÃ¶rÃ¼ntÃ¼lenme SayÄ±sÄ±", fontsize=12)
plt.ylabel("Blog BaÅŸlÄ±klarÄ±", fontsize=12)
plt.show()
"""





"""
) Yorum SayÄ±sÄ± DaÄŸÄ±lÄ±mÄ±
Her bir blogdaki yorum sayÄ±sÄ±nÄ± pasta grafiÄŸi ile gÃ¶sterebiliriz.
# Yorum sayÄ±sÄ±nÄ± hazÄ±rlama
yorum_sayilari = [len(blog["yorumlar"]) for blog in blog_icerikleri]

# Pasta grafiÄŸi Ã§izimi
plt.figure(figsize=(8, 8))
plt.pie(
    yorum_sayilari,
    labels=blog_basliklari,
    autopct='%1.1f%%',
    startangle=140,
    colors=['gold', 'lightblue', 'lightgreen', 'coral']
)
plt.title("Bloglara GÃ¶re Yorum DaÄŸÄ±lÄ±mÄ±", fontsize=14)
plt.show()
"""



"""
d) SÄ±k KullanÄ±lan Kelimeler
Blog iÃ§eriklerinde en sÄ±k kullanÄ±lan kelimelerin daÄŸÄ±lÄ±mÄ±nÄ± Ã§ubuk grafikle gÃ¶rselleÅŸtirebiliriz.
from collections import Counter

# SÄ±k kullanÄ±lan kelimeleri hesaplama
tum_kelimeler = []
for blog in blog_icerikleri:
    kelimeler = blog["icerik"].lower().split()
    tum_kelimeler.extend(kelimeler)

kelime_sayilari = Counter(tum_kelimeler)
en_sik_kelimeler = kelime_sayilari.most_common(10)

kelimeler = [kelime for kelime, _ in en_sik_kelimeler]
kullanim_sayilari = [sayi for _, sayi in en_sik_kelimeler]

# Ã‡ubuk grafik Ã§izimi
plt.figure(figsize=(10, 6))
plt.bar(kelimeler, kullanim_sayilari, color='purple')
plt.title("En SÄ±k KullanÄ±lan Kelimeler", fontsize=14)
plt.xlabel("Kelime", fontsize=12)
plt.ylabel("KullanÄ±m SayÄ±sÄ±", fontsize=12)
plt.xticks(rotation=45)
plt.show()
"""




"""
e) YazarlarÄ±n Ortalama GÃ¶rÃ¼ntÃ¼lenme SayÄ±sÄ±
Yazar baÅŸÄ±na ortalama gÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ±nÄ± sÃ¼tun grafikle gÃ¶rselleÅŸtirebiliriz.
# Yazar baÅŸÄ±na ortalama gÃ¶rÃ¼ntÃ¼lenme hesaplama
yazar_goruntulenmeleri = {}
for blog in blog_icerikleri:
    yazar = blog["yazar"]
    goruntulenme = blog["goruntulenme"]
    if yazar not in yazar_goruntulenmeleri:
        yazar_goruntulenmeleri[yazar] = []
    yazar_goruntulenmeleri[yazar].append(goruntulenme)

ortalama_goruntulenme = {
    yazar: sum(goruntulenmeler) / len(goruntulenmeler)
    for yazar, goruntulenmeler in yazar_goruntulenmeleri.items()
}

# Verileri hazÄ±rlama
yazarlar = list(ortalama_goruntulenme.keys())
goruntulenme_ortalamalari = list(ortalama_goruntulenme.values())

# Ã‡ubuk grafik Ã§izimi
plt.figure(figsize=(8, 5))
plt.bar(yazarlar, goruntulenme_ortalamalari, color='green')
plt.title("YazarlarÄ±n Ortalama GÃ¶rÃ¼ntÃ¼lenme SayÄ±larÄ±", fontsize=14)
plt.xlabel("Yazarlar", fontsize=12)
plt.ylabel("Ortalama GÃ¶rÃ¼ntÃ¼lenme", fontsize=12)
plt.show()
"""



"""
3. GeliÅŸtirme ve GeniÅŸletme Ä°mkanlarÄ±
Seaborn ile Ä°yileÅŸtirilmiÅŸ Grafikler: Seaborn kullanarak grafikleri daha modern bir gÃ¶rÃ¼nÃ¼me kavuÅŸturabilirsiniz.
Interaktif Grafikler: Plotly veya Bokeh kÃ¼tÃ¼phanelerini kullanarak kullanÄ±cÄ±larÄ±n grafikleri keÅŸfetmesine olanak saÄŸlayabilirsiniz.
Dashboard: Dash veya Streamlit gibi araÃ§larla bir dashboard oluÅŸturarak tÃ¼m analizleri tek bir platformda sunabilirsiniz.

"""

"""


"""

"""


"""

"""


"""


"""


"""


"""


"""